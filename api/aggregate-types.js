/* eslint-disable @typescript-eslint/no-var-requires */

const path = require('path');
const fs = require('fs');
const { promisify } = require('util');
const { glob } = require('glob');

const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);

const apiDir = path.dirname(require.main.filename);
const clientAppDir = path.join(apiDir, '../app/src/types');
const outputFile = path.join(clientAppDir, 'types.ts');

console.log('API Directory:', apiDir);
console.log('Client Types Directory:', clientAppDir);

async function aggregateTypes() {
  console.log('Starting to aggregate types...');
  try {
    const files = await glob('./**/*.interface.ts', {
      ignore: 'node_modules/**',
    });
    console.log('Files found:', files);

    if (files.length === 0) {
      console.log('No interface files found.');
      return;
    }

    const contents = await Promise.all(
      files.map(async (file) => {
        const content = await readFileAsync(path.join(apiDir, file), 'utf8');
        // Filter out import statements
        return content
          .split('\n')
          .filter((line) => !line.startsWith('import '))
          .join('\n');
      }),
    );

    let combinedContent = contents.join('\n');

    // Add a header to the combined content
    const infoText = `
    This file was generated by the aggregate-types script.
    
       This file is a combination of all TypeScript types in the client-types directory.
    
       This is to make sure that the client application has access to all the types in the client-types directory and we have consistent types across the app.
    
       To regenerate this file, run the aggregate-types script.
    
       From the API directory, run:  \`node aggregate-types.js\`
    
       Authored by: @AnguleMathias :)
    `;

    combinedContent = `/*${infoText}*/\n${combinedContent}`;

    await writeFileAsync(outputFile, combinedContent);
    console.log('types.ts has been created:', outputFile);
  } catch (err) {
    console.error('An error occurred:', err);
  }
}

aggregateTypes();
